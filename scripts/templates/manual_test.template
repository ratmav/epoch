# Manual Test $date

## Test Group 1: Plugin Installation & Commands

### Test 1.1: Plugin Load

#### Run
- [ ] Start Neovim
- [ ] Run `:lua print(vim.fn.exists(':EpochEdit'))`

#### Result
**Expected:** Returns `2` (command exists)
**Result:**

### Test 1.2: Available Commands

#### Run
- [ ] Type `:Epoch` and press Tab for completion

#### Result
**Expected:** Shows all five commands: `EpochEdit`, `EpochInterval`, `EpochReport`, `EpochList`, `EpochClear`

**Actual:**

---

## Test Group 2: Basic Time Tracking

### Test 2.1: First Time Interval Creation

#### Run
- [ ] Run `:EpochInterval`
- [ ] Enter client: `test-client`
- [ ] Enter project: `test-project`
- [ ] Enter task: `test-task`

#### Result
**Expected:**
- Prompts appear in sequence
- No error messages
- Confirmation that interval started

**Actual:**

### Test 2.2: View Created Timesheet

#### Run
- [ ] Run `:EpochEdit`

#### Result
**Expected:**
- Floating window opens (40% width, 70% height)
- Shows today's date in YYYY-MM-DD format
- Contains one interval with current time as start
- Stop field is empty string `""`
- Lua syntax highlighting active

**Actual:**

### Test 2.3: Manual Timesheet Editing

#### Run
- [ ] In the edit window, change the task to `updated-task`
- [ ] Run `:EpochEdit` again (this closes and saves)

#### Result
**Expected:**
- No validation errors
- File saves successfully
- Window closes
- Success notification appears

**Actual:**

### Test 2.4: Reopen to Verify Changes

#### Run
- [ ] Run `:EpochEdit` again

#### Result
**Expected:**
- Floating window opens
- Shows the updated task name `updated-task`
- Changes were persisted correctly

**Actual:**

### Test 2.5: EpochEdit With Valid Date

#### Setup
- [ ] Run `:EpochClear` to start clean

#### Run
- [ ] Run `:EpochEdit 2024-12-25`

#### Result
**Expected:**
- Opens timesheet for December 25, 2024
- Creates empty timesheet if none exists for that date
- Window title shows "epoch - timesheet"
- Buffer name includes the date path

**Actual:**

### Test 2.6: EpochEdit With Invalid Date Format

#### Run
- [ ] Run `:EpochEdit invalid-date`
- [ ] Run `:EpochEdit 12/25/2024`
- [ ] Run `:EpochEdit 2024-13-01`

#### Result
**Expected:** User is notified of invalid date format
**Actual:**

### Test 2.7: Multiple Date Timesheets

#### Setup
- [ ] Run `:EpochClear` to start clean

#### Run
- [ ] Run `:EpochEdit 2024-01-01` and add some content, save
- [ ] Run `:EpochEdit 2024-01-02` and add different content, save
- [ ] Run `:EpochEdit 2024-01-01` again

#### Result
**Expected:**
- Each date opens separate timesheet
- Content persists correctly for each date
- No cross-contamination between dates

**Actual:**

---

## Test Group 3: Multiple Intervals

### Test 3.1: Auto-Close Previous Interval

#### Run
- [ ] Run `:EpochInterval`
- [ ] Enter client: `client-two`
- [ ] Enter project: `project-two`
- [ ] Enter task: `task-two`
- [ ] Run `:EpochEdit`

#### Result
**Expected:**
- First interval now has stop time filled in
- Second interval starts at the stop time of first interval
- Second interval has empty stop time

**Actual:**

### Test 3.2: Manual Time Entry

#### Run
- [ ] In edit window, manually set first interval:
  - start: `09:00 AM`
  - stop: `10:30 AM`
- [ ] Set second interval:
  - start: `10:30 AM`
  - stop: `12:00 PM`
- [ ] Close/save with `:EpochEdit`

#### Result
**Expected:**
- No validation errors
- Daily total calculated as `03:00`

**Actual:**

---

## Test Group 4: Time Format Validation

### Test 4.1: Valid Time Formats

#### Setup
- [ ] Run `:EpochClear` to start with clean timesheet data

#### Run
- [ ] Create single interval: run `:EpochInterval` with client: `test-client`, project: `test-project`, task: `test-task`
- [ ] Run `:EpochEdit` to open timesheet
- [ ] Test each valid format by changing the interval's start time:
  - Change start to `12:00 AM` (midnight), close/save with `:EpochEdit`
  - Reopen, change start to `01:30 AM`, close/save
  - Reopen, change start to `12:00 PM`, close/save
  - Reopen, change start to `11:59 PM`, close/save

#### Result
**Expected:** All formats accepted without error

**Actual:**

### Test 4.2: Invalid Time Formats

#### Setup
- [ ] Run `:EpochClear` to start with clean timesheet data

#### Run
- [ ] Create single interval: run `:EpochInterval` with client: `test-client`, project: `test-project`, task: `test-task`
- [ ] Run `:EpochEdit` to open timesheet
- [ ] Try each invalid format by changing the interval's start time:
  - Change start to `9:30` (missing AM/PM), try to close/save with `:EpochEdit`
  - If successful, change start to `09:30` (missing AM/PM), try to close/save
  - If successful, change start to `13:30 PM` (invalid hour), try to close/save
  - If successful, change start to `09:60 AM` (invalid minutes), try to close/save

#### Result
**Expected:** Validation errors appear, timesheet doesn't save, window stays open
**Actual:**

#### Teardown
- [ ] Fix the time format to valid value (e.g., `09:00 AM`) and close/save with `:EpochEdit`

---

## Test Group 5: Interval Validation

### Test 5.1: Missing Required Fields

#### Setup
- [ ] Run `:EpochClear` to start with clean timesheet data

#### Run
- [ ] Create single interval: run `:EpochInterval` with client: `test-client`, project: `test-project`, task: `test-task`
- [ ] Run `:EpochEdit` to open timesheet
- [ ] Change `client = "test-client"` to `client = ""`
- [ ] Try to close/save with `:EpochEdit`

#### Result
**Expected:** Validation error about required fields
**Actual:**

#### Teardown
- [ ] Fix client field back to `client = "test-client"` and close/save with `:EpochEdit`

### Test 5.2: Invalid Notes Format

#### Setup
- [ ] Run `:EpochClear` to start with clean timesheet data

#### Run
- [ ] Create single interval: run `:EpochInterval` with client: `test-client`, project: `test-project`, task: `test-task`
- [ ] Run `:EpochEdit` to open timesheet
- [ ] Change notes from `{}` to `"string"`
- [ ] Try to close/save with `:EpochEdit`

#### Result
**Expected:** Validation error about notes format
**Actual:**

#### Teardown
- [ ] Fix notes back to `{}` and close/save with `:EpochEdit`

### Test 5.3: Notes Array Validation

#### Setup
- [ ] Run `:EpochClear` to start with clean timesheet data

#### Run
- [ ] Create single interval: run `:EpochInterval` with client: `test-client`, project: `test-project`, task: `test-task`
- [ ] Run `:EpochEdit` to open timesheet
- [ ] Set notes to `{"valid note", "another note"}`
- [ ] Close/save with `:EpochEdit`

#### Result
**Expected:** No errors, saves successfully
**Actual:**

---

## Test Group 6: Overlap Detection

### Test 6.1: Overlapping Intervals

#### Setup
- [ ] Run `:EpochClear` to start with clean timesheet data
- [ ] Create first interval: run `:EpochInterval` with client: `client-one`, project: `project-one`, task: `task-one`
- [ ] Create second interval: run `:EpochInterval` with client: `client-two`, project: `project-two`, task: `task-two`

#### Run
- [ ] Run `:EpochEdit` to open timesheet
- [ ] Manually edit intervals to create overlap:
  - First interval: start `09:00 AM`, stop `11:00 AM`
  - Second interval: start `10:30 AM`, stop `12:00 PM`
- [ ] Try to close/save with `:EpochEdit`

#### Result
**Expected**: Validation error about overlapping intervals
**Actual:**

#### Teardown
- [ ] Fix second interval to start `11:00 AM` to remove overlap and close/save with `:EpochEdit`

### Test 6.2: Adjacent Intervals (Valid)

#### Setup
- [ ] Run `:EpochClear` to start with clean timesheet data
- [ ] Create first interval: run `:EpochInterval` with client: `client-one`, project: `project-one`, task: `task-one`
- [ ] Create second interval: run `:EpochInterval` with client: `client-two`, project: `project-two`, task: `task-two`

#### Run
- [ ] Run `:EpochEdit` to open timesheet
- [ ] Manually edit intervals to be adjacent:
  - First interval: start `09:00 AM`, stop `10:30 AM`
  - Second interval: start `10:30 AM`, stop `12:00 PM`
- [ ] Close/save with `:EpochEdit`

#### Result
**Expected:** No errors, saves successfully
**Actual:**

---

## Test Group 7: Reporting

### Test 7.1: Basic Report Generation

#### Setup
- [ ] Run `:EpochClear` to start with clean timesheet data
- [ ] Create first interval: run `:EpochInterval` with client: `client-one`, project: `project-one`, task: `task-one`
- [ ] Create second interval: run `:EpochInterval` with client: `client-two`, project: `project-two`, task: `task-two`

#### Run
- [ ] Run `:EpochReport`

#### Result
**Expected:**
- Floating window opens (50% width, 60% height)
- Shows current week data
- Sections: "By Day", "By Client", "Overall"
- Displays daily and client totals

**Actual:**

### Test 7.2: Empty Report

#### Setup
- [ ] Run `:EpochClear` to start with clean timesheet data

#### Run
- [ ] Run `:EpochReport`

#### Result
**Expected:**
- Report shows appropriate "no data" messages
- No errors or crashes

**Actual:**

---

## Test Group 8: Data Persistence

### Test 8.1: File Storage Location

#### Setup
- [ ] Run `:EpochClear` to start with clean timesheet data
- [ ] Create an interval: run `:EpochInterval` with client: `test-client`, project: `test-project`, task: `test-task`

#### Run
- [ ] Run `:lua print(vim.fn.stdpath('data') .. '/epoch')` to see data directory
- [ ] Check file exists in that directory: `$ cat $HOME/.local/share/nvim/epoch/$date.lua`

#### Result
**Expected:** File exists and contains valid Lua table
**Actual:**

### Test 8.2: Data Reload

#### Setup
- [ ] Run `:EpochClear` to start with clean timesheet data
- [ ] Create an interval: run `:EpochInterval` with client: `test-client`, project: `test-project`, task: `test-task`

#### Run
- [ ] Close Neovim
- [ ] Restart Neovim
- [ ] Run `:EpochEdit`

#### Result
**Expected:** Previous data loads correctly
**Actual:**

### Test 8.3: Empty Timesheet List

#### Setup
- [ ] Run `:EpochClear` to start with clean timesheet data

#### Run
- [ ] Run `:EpochList`

#### Result
**Expected:** Message "epoch: no timesheet files found"
**Actual:**

### Test 8.4: Single Timesheet List

#### Setup
- [ ] Run `:EpochClear` to start with clean timesheet data
- [ ] Create an interval: run `:EpochInterval` with client: `test-client`, project: `test-project`, task: `test-task`

#### Run
- [ ] Run `:EpochList`

#### Result
**Expected:**
- Message "epoch: available timesheets"
- Prints today's date (e.g., 2025-06-14)

**Actual:**

### Test 8.5: Multiple Timesheet List

#### Setup
- [ ] Run `:EpochClear` to start with clean timesheet data
- [ ] Create timesheet for today: run `:EpochInterval` with client: `today-client`, project: `today-project`, task: `today-task`
- [ ] Run `:EpochEdit 2024-01-01` and add some completed intervals, save
- [ ] Run `:EpochEdit 2024-01-02` and add different completed intervals, save

#### Run
- [ ] Run `:EpochList`

#### Result
**Expected:**
- Message "epoch: available timesheets"
- Prints three dates in chronological order: 2024-01-01, 2024-01-02, today

**Actual:**

### Test 8.6: List Then Edit Workflow

#### Setup
- [ ] Run `:EpochClear` to start with clean timesheet data
- [ ] Create timesheet for today: run `:EpochInterval` with client: `today-client`, project: `today-project`, task: `today-task`
- [ ] Run `:EpochEdit 2024-01-01` and add some content, save

#### Run
- [ ] Run `:EpochList` to see available dates
- [ ] Run `:EpochEdit 2024-01-01` to open the specific timesheet

#### Result
**Expected:**
- List shows both today and 2024-01-01
- EpochEdit opens 2024-01-01 timesheet in floating window
- File contains the content added earlier

**Actual:**

---

## Test Group 9: Edge Cases

### Test 9.1: Unclosed Interval Impact

#### Setup
- [ ] Run `:EpochClear` to start with clean timesheet data
- [ ] Create interval: run `:EpochInterval` with client: `test-client`, project: `test-project`, task: `test-task`

#### Run
- [ ] Run `:EpochEdit` to open timesheet
- [ ] Confirm interval stop time is `""`
- [ ] Close/save with `:EpochEdit`
- [ ] Run `:EpochReport`

#### Result
**Expected:** Unclosed interval doesn't contribute to daily total
**Actual:**

### Test 9.2: Multiple Days

#### Setup
- [ ] Run `:EpochClear` to start with clean timesheet data
- [ ] Create timesheet for today: run `:EpochInterval` with client: `today-client`, project: `today-project`, task: `today-task`
- [ ] Manually create file for yesterday with different date (filename and date in file) in data directory

#### Run
- [ ] Run `:EpochReport`

#### Result
**Expected:** Report shows data from multiple days in current week
**Actual:**

### Test 9.3: Invalid Lua Syntax

#### Setup
- [ ] Run `:EpochClear` to start with clean timesheet data
- [ ] Create interval: run `:EpochInterval` with client: `test-client`, project: `test-project`, task: `test-task`

#### Run
- [ ] Run `:EpochEdit` to open timesheet
- [ ] Manually corrupt timesheet with invalid Lua syntax (e.g., remove closing brace)
- [ ] Try to close/save with `:EpochEdit`

#### Result
**Expected:** Clear error message about syntax error
**Actual:**

#### Teardown
- [ ] Fix the Lua syntax and close/save with `:EpochEdit`

### Test 9.4: Rapid Interval Creation (Sub-Minute Succession)

#### Setup
- [ ] Run `:EpochClear` to start with clean timesheet data

#### Run
- [ ] Run `:EpochInterval` and create first interval (client1, project1, task1)
- [ ] Immediately run `:EpochInterval` again (within same minute)
- [ ] Create second interval (client2, project2, task2)
- [ ] Immediately run `:EpochInterval` again (within same minute)
- [ ] Create third interval (client3, project3, task3)
- [ ] Run `:EpochEdit` to examine the intervals

#### Result
**Expected:**
- No overlapping intervals exist
- Each interval has sequential start times (shifted forward by 1 minute)
- Previous intervals properly closed with stop times
- Intervals appear in chronological order
- No validation errors about overlaps

**Actual:**

---

## Test Group 10: Hours Field Calculation

### Test 10.1: Hours Field Added on Interval Close

#### Setup
- [ ] Run `:EpochClear` to start with clean timesheet data

#### Run
- [ ] Create first interval: run `:EpochInterval` with client: `test-client`, project: `test-project`, task: `test-task`
- [ ] Create second interval immediately: run `:EpochInterval` with client: `client-two`, project: `project-two`, task: `task-two`
- [ ] Run `:EpochEdit` to open timesheet

#### Result
**Expected:**
- First interval has stop time filled in (auto-closed)
- First interval has `hours` field with decimal value (e.g., `hours = 0.016666666666666666`)
- Second interval has empty stop time and no hours field
- Hours field appears between stop and notes in the serialization

**Actual:**

### Test 10.2: Manual Interval Close with Known Duration

#### Setup
- [ ] Run `:EpochClear` to start with clean timesheet data
- [ ] Create interval: run `:EpochInterval` with client: `test-client`, project: `test-project`, task: `test-task`

#### Run
- [ ] Run `:EpochEdit` to open timesheet
- [ ] Manually set start time to `09:00 AM`
- [ ] Manually set stop time to `11:00 AM` (exactly 2 hours)
- [ ] Close/save with `:EpochEdit`
- [ ] Reopen with `:EpochEdit`

#### Result
**Expected:**
- Interval now has `hours = 2.0` field
- Field appears between stop and notes in file structure
- No validation errors during save

**Actual:**

### Test 10.3: Fractional Hours Calculation

#### Setup
- [ ] Run `:EpochClear` to start with clean timesheet data
- [ ] Create interval: run `:EpochInterval` with client: `test-client`, project: `test-project`, task: `test-task`

#### Run
- [ ] Run `:EpochEdit` to open timesheet
- [ ] Set start time to `09:00 AM`
- [ ] Set stop time to `10:30 AM` (1.5 hours)
- [ ] Close/save with `:EpochEdit`
- [ ] Reopen with `:EpochEdit`

#### Result
**Expected:**
- Interval has `hours = 1.5` field
- Calculation is precise decimal (not rounded)

**Actual:**

### Test 10.4: Invalid Intervals Don't Get Hours Field

#### Setup
- [ ] Run `:EpochClear` to start with clean timesheet data
- [ ] Create interval: run `:EpochInterval` with client: `test-client`, project: `test-project`, task: `test-task`

#### Run
- [ ] Run `:EpochEdit` to open timesheet
- [ ] Set start time to `invalid-time`
- [ ] Set stop time to `10:30 AM`
- [ ] Close/save with `:EpochEdit`
- [ ] Reopen with `:EpochEdit`

#### Result
**Expected:**
- Interval has no `hours` field (due to invalid start time)
- No errors during save/load cycle

**Actual:**

### Test 10.5: Unclosed Intervals Don't Get Hours Field

#### Setup
- [ ] Run `:EpochClear` to start with clean timesheet data
- [ ] Create interval: run `:EpochInterval` with client: `test-client`, project: `test-project`, task: `test-task`

#### Run
- [ ] Run `:EpochEdit` to open timesheet
- [ ] Verify stop time is empty string `""`
- [ ] Close/save with `:EpochEdit`
- [ ] Reopen with `:EpochEdit`

#### Result
**Expected:**
- Interval has no `hours` field (incomplete interval)
- File structure unchanged except for any formatting

**Actual:**

### Test 10.6: Hours Field Persistence Across Sessions

#### Setup
- [ ] Run `:EpochClear` to start with clean timesheet data
- [ ] Create interval: run `:EpochInterval` with client: `test-client`, project: `test-project`, task: `test-task`
- [ ] Create second interval: run `:EpochInterval` with client: `client-two`, project: `project-two`, task: `task-two`

#### Run
- [ ] Run `:EpochEdit` and manually set first interval: start `09:00 AM`, stop `10:30 AM`
- [ ] Close/save with `:EpochEdit`
- [ ] Exit Neovim completely
- [ ] Restart Neovim
- [ ] Run `:EpochEdit`

#### Result
**Expected:**
- First interval still has correct `hours = 1.5` field
- Hours field persists correctly across restarts
- File format and hours calculation unchanged

**Actual:**

---

## Test Group 11: Cleanup Operations

### Test 11.1: Clear All Data

#### Setup
Existing timesheet data

#### Run
- [ ] Run `:EpochClear`
- [ ] Confirm deletion

#### Result
**Expected:**
- Confirmation prompt appears
- All timesheet files deleted: `ls ~/.local/share/nvim/epoch/`

**Actual:**

### Test 11.2: Cancel Clear Operation

#### Setup
- [ ] Run `:EpochClear` to start with clean timesheet data
- [ ] Create interval: run `:EpochInterval` with client: `test-client`, project: `test-project`, task: `test-task`

#### Run
- [ ] Run `:EpochClear`
- [ ] Cancel/decline deletion

#### Result
**Expected:** No files deleted, operation cancelled
- Confirmation prompt appears
- No timesheet files deleted: `ls ~/.local/share/nvim/epoch/`
**Actual:**

---

## Test Group 12: UI Behavior

### Test 12.1: Window Sizing

#### Setup
- [ ] Run `:EpochClear` to start with clean timesheet data
- [ ] Create interval: run `:EpochInterval` with client: `test-client`, project: `test-project`, task: `test-task`

#### Run
- [ ] Test edit window sizing: run `:EpochEdit` (should be 40% width, 70% height)
- [ ] Close edit window with `:EpochEdit`
- [ ] Test report window sizing: run `:EpochReport` (should be 50% width, 60% height)

#### Result
**Expected:** Windows appear at correct sizes
**Actual:**

### Test 12.2: Syntax Highlighting

#### Setup
- [ ] Run `:EpochClear` to start with clean timesheet data
- [ ] Create interval: run `:EpochInterval` with client: `test-client`, project: `test-project`, task: `test-task`

#### Run
- [ ] Open edit window: run `:EpochEdit`
- [ ] Verify Lua syntax highlighting

#### Result
**Expected:** Lua syntax highlighting active in edit window
**Actual:**

### Test 12.3: Multiple Window Management

#### Setup
- [ ] Run `:EpochClear` to start with clean timesheet data
- [ ] Create interval: run `:EpochInterval` with client: `test-client`, project: `test-project`, task: `test-task`

#### Run
- [ ] Open `:EpochEdit`
- [ ] Without closing, run `:EpochReport`
- [ ] Close report by runnning `:EpochReport`
- [ ] Close timesheet by runnning `:EpochEdit`

#### Result
**Expected:**
- Report window opens on top and is not editable
- timesheet window remains visible under report window
- timesheet is editable
**Actual:**

### Test 12.4: Floating Window Scrolling with Large Content

#### Setup
- [ ] Run `:EpochClear` to start with clean timesheet data
- [ ] Create multiple intervals (10+ entries): run `:EpochInterval` repeatedly with different client/project/task combinations

#### Run
- [ ] Run `:EpochEdit`
- [ ] Verify window size remains at 40% width, 70% height
- [ ] Test scrolling with `j`/`k` (down/up)
- [ ] Test scrolling with `h`/`l` (left/right for long lines)
- [ ] Test `gg` (go to top) and `G` (go to bottom)
- [ ] Test `Ctrl-u`/`Ctrl-d` (page up/down)

#### Result
**Expected:**
- Window size unchanged regardless of content length
- All vi navigation bindings work normally
- Content scrolls within fixed window boundaries
- Can access all content via scrolling

**Actual:**
